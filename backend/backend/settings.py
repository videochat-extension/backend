"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 4.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import os
from pathlib import Path
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

try:
    load_dotenv(os.path.join(BASE_DIR, "..", ".env"))
except Exception:
    pass

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ["SECRET_KEY"]

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = os.getenv("DEBUG") == "True"
DEBUG = os.getenv("DEBUG") == "True"

ALLOWED_HOSTS = [ "ve-api.starbase.wiki", '127.0.0.1' ]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'corsheaders',
    'rest_framework',
    'adrf',

    'allauth',
    'allauth.account',
    'allauth.socialaccount',

    # ... include the providers you want to enable:
    'allauth.socialaccount.providers.patreon',

    'users',
    'oauth2_provider',

    'api',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, "templates")
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',

                # `allauth` needs this from django
                'django.template.context_processors.request',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CACHES = {
    'default': {
        #"BACKEND": "django.core.cache.backends.dummy.DummyCache",
         'BACKEND': 'django.core.cache.backends.memcached.PyMemcacheCache',
         'LOCATION': 'cache:11211',
    },
    'users-count': {
        "BACKEND": "django.core.cache.backends.db.DatabaseCache",
        "LOCATION": "user-count",
    },
    'bdc-cache': {
        "BACKEND": "django.core.cache.backends.db.DatabaseCache",
        "LOCATION": "bdc-cache",
    },
    'patrons': {
        "BACKEND": "django.core.cache.backends.db.DatabaseCache",
        "LOCATION": "patrons",
    }
}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
}


REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    )
}

#django-cors-headers
CORS_ALLOWED_ORIGINS = [
    'chrome-extension://alchldmijhnnapijdmchpkdeikibjgoi',
    'chrome-extension://jdpiggacibaaecfbegkhakcmgaafjajn',
    'moz-extension://e6bfaa88-4a9c-4a65-bdf1-094d64b11343',
    'https://videochat-extension.starbase.wiki'
]

if DEBUG or os.getenv('CORS_ALLOW_ALL_ORIGINS') == "True":
    CORS_ALLOW_ALL_ORIGINS = True

#api
IPAPI_CACHE_DURATION = int(os.environ["IPAPI_CACHE_DURATION"])
IPAPI_KEY = str(os.environ["IPAPI_KEY"])
BDC_KEY=str(os.environ["BDC_KEY"])
BDC_CACHE_DURATION = int(os.environ["BDC_CACHE_DURATION"])
BDC_CACHE_TOUCH_DURATION = int(os.environ["BDC_CACHE_TOUCH_DURATION"])

# parse_user.py
DISCORD_BOT_TOKEN = os.environ["DISCORD_BOT_TOKEN"]
DISCORD_CHANNEL_STATUS = os.environ["DISCORD_CHANNEL_STATUS"]
DISCORD_CHANNEL_REPORT = os.environ["DISCORD_CHANNEL_REPORT"]
PARSE_USERS = {
    "CHROME": {
        "url": os.environ["PARSE_USERS_CHROME_URL"],
        "regex": os.environ["PARSE_USERS_CHROME_REGEX"]
    },
    "EDGE": {
        "url": os.environ["PARSE_USERS_EDGE_URL"],
        "regex": os.environ["PARSE_USERS_EDGE_REGEX"]
    },
    "FIREFOX": {
        "url": os.environ["PARSE_USERS_FIREFOX_URL"],
        "regex": os.environ["PARSE_USERS_FIREFOX_REGEX"]
    }
}

PARSE_USERS_FREQUENCY = int(os.environ["PARSE_USERS_FREQUENCY"])

GH_APP_ID = os.environ["GH_APP_ID"]
with open(os.environ["GH_PR_PATH"]) as key:
    GH_PR_KEY = key.read()
GH_INSTL_ID = os.environ["GH_INSTL_ID"]
GH_SECRET = os.environ["GH_SECRET"]

# custom user model
AUTH_USER_MODEL = 'users.User'

LOGIN_URL = '/accounts/patreon/login/?process=login'

CORS_ORIGIN_ALLOW_ALL = True

SITE_ID = 1
# Provider specific settings
SOCIALACCOUNT_PROVIDERS = {
    'patreon': {
        'VERSION': 'v2',
        'SCOPE': ['identity'],
    }
}

ACCOUNT_EMAIL_VERIFICATION = "none"
SOCIALACCOUNT_STORE_TOKENS = True

OAUTH2_PROVIDER = {
    'SCOPES': {
        'api': 'videochat extension api'
    },
    'ACCESS_TOKEN_EXPIRE_SECONDS': int(os.environ["ACCESS_TOKEN_EXPIRE_SECONDS"])
}

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]

CANNY_API_KEY = os.environ["CANNY_API_KEY"]
CANNY_DISCORD_WEBHOOK = os.environ["CANNY_DISCORD_WEBHOOK"]

PATREON_CAMPAIGN_ID = os.environ["PATREON_CAMPAIGN_ID"]
PATREON_ACCESS_TOKEN = os.environ["PATREON_ACCESS_TOKEN"]
PATREON_WEBHOOK_SECRET = os.environ["PATREON_WEBHOOK_SECRET"]
WEBHOOK_REPORT = os.environ["WEBHOOK_REPORT"]
PARSE_PATRONS_FREQUENCY_MINUTES = int(os.environ["PARSE_PATRONS_FREQUENCY_MINUTES"])
